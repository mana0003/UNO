# Coverage data, format version: 3.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
0
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
302
1063
11
apply
Apply
false
0
false
Try {\r\n    previousState = Some(controller.field) // Save state for undo\r\n    //controller.draw()\r\n    /*controller.field = controller.field.draw()\r\n    controller.notifyObservers(Event.Draw)*/\r\n    val newCard = randomCard // Draw a random card\r\n    val currentPlayer = controller.field.players(controller.field.currentPlayer)\r\n\r\n    // Update the player's hand\r\n    val updatedPlayer = currentPlayer.copy(hand = currentPlayer.hand.addCard(newCard))\r\n\r\n    // Update the list of players\r\n    val updatedPlayers = controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer)\r\n\r\n    // Update the game state\r\n    controller.field = controller.field.copy(players = updatedPlayers)\r\n    controller.notifyObservers(Event.Draw)\r\n  }

1
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
515
525
16
randomCard
Ident
false
0
false
randomCard

2
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
573
629
17
apply
Apply
false
0
false
controller.field.players(controller.field.currentPlayer)

3
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
716
751
20
addCard
Apply
false
0
false
currentPlayer.hand.addCard(newCard)

4
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
816
910
23
updated
Apply
false
0
false
controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer)

5
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
1020
1058
29
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Draw)

6
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
execute
266
286
11
execute
DefDef
false
0
false
override def execute

7
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undo
1129
1145
33
<none>
Block
false
0
false
case Some(state)

8
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undo
1156
1281
34
apply
Apply
false
0
false
Try {\r\n        controller.field = state\r\n        controller.notifyObservers(Event.Undo) // Notify that undo occurred\r\n      }

9
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undo
1205
1243
36
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Undo)

10
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undo
1287
1296
38
<none>
Block
false
0
false
case None

11
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undo
1308
1356
38
<init>
Apply
false
0
false
new IllegalStateException("No state to undo to")

12
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undo
1069
1086
32
undo
DefDef
false
0
false
override def undo

13
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
312
1367
10
apply
Apply
false
0
false
Try {\r\n    previousState = Some(controller.field) // Save state for undo\r\n    //controller.play(card)\r\n    val currentPlayer = controller.field.players(controller.field.currentPlayer)\r\n\r\n    // Validate the move\r\n    if (!card.canBePlayedOn(controller.field.topCard)) {\r\n      throw new IllegalArgumentException("Card cannot be played on the current top card")\r\n    }\r\n\r\n    // Update the player's hand by removing the card\r\n    val updatedPlayer = currentPlayer.copy(hand = currentPlayer.hand.removeCard(card))\r\n\r\n    // Update the list of players\r\n    val updatedPlayers = controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )\r\n\r\n    // Update the game state with the new topCard and move to the next player\r\n    controller.field = controller.field.copy(\r\n      players = updatedPlayers,\r\n      topCard = card,\r\n      currentPlayer = (controller.field.currentPlayer + 1) % controller.field.players.size\r\n    )\r\n\r\n    // Notify observers about the play event\r\n    controller.notifyObservers(Event.Play)\r\n  }

14
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
439
495
13
apply
Apply
false
0
false
controller.field.players(controller.field.currentPlayer)

15
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
534
578
16
canBePlayedOn
Apply
false
0
false
card.canBePlayedOn(controller.field.topCard)

16
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
589
672
17
throw
Apply
false
0
false
throw new IllegalArgumentException("Card cannot be played on the current top card")

17
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
595
672
17
<init>
Apply
false
0
false
new IllegalArgumentException("Card cannot be played on the current top card")

18
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
580
679
16
<none>
Block
true
0
false
{\r\n      throw new IllegalArgumentException("Card cannot be played on the current top card")\r\n    }

19
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
787
822
21
removeCard
Apply
false
0
false
currentPlayer.hand.removeCard(card)

20
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
887
987
24
updated
Apply
false
0
false
controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )

21
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
1234
1263
33
size
Select
false
0
false
controller.field.players.size

22
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
1324
1362
37
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Play)

23
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
execute
276
296
10
execute
DefDef
false
0
false
override def execute

24
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undo
1433
1449
41
<none>
Block
false
0
false
case Some(state)

25
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undo
1460
1585
42
apply
Apply
false
0
false
Try {\r\n        controller.field = state\r\n        controller.notifyObservers(Event.Undo) // Notify that undo occurred\r\n      }

26
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undo
1509
1547
44
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Undo)

27
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undo
1591
1600
46
<none>
Block
false
0
false
case None

28
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undo
1612
1660
46
<init>
Apply
false
0
false
new IllegalStateException("No state to undo to")

29
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undo
1373
1390
40
undo
DefDef
false
0
false
override def undo

30
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
<init>
269
289
12
<init>
Apply
false
0
false
new CommandManager()

31
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
345
372
15
<init>
Apply
false
0
false
new PlayCommand(this, card)

32
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
378
408
16
doStep
Apply
false
0
false
commandManager.doStep(command)

33
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
424
439
17
<none>
Block
false
0
false
case Success(_)

34
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
483
506
18
<none>
Block
false
0
false
case Failure(exception)

35
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
510
538
18
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

36
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
295
303
14
play
DefDef
false
0
false
def play

37
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
596
617
23
<init>
Apply
false
0
false
new DrawCommand(this)

38
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
623
653
24
doStep
Apply
false
0
false
commandManager.doStep(command)

39
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
669
684
25
<none>
Block
false
0
false
case Success(_)

40
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
728
751
26
<none>
Block
false
0
false
case Failure(exception)

41
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
755
783
26
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

42
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
556
564
22
draw
DefDef
false
0
false
def draw

43
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
827
850
31
undoStep
Select
false
0
false
commandManager.undoStep

44
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
866
881
32
<none>
Block
false
0
false
case Success(_)

45
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
885
912
32
notifyObservers
Apply
false
0
false
notifyObservers(Event.Undo)

46
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
920
943
33
<none>
Block
false
0
false
case Failure(exception)

47
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
947
975
33
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

48
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
801
809
30
undo
DefDef
false
0
false
def undo

49
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1019
1042
38
redoStep
Select
false
0
false
commandManager.redoStep

50
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1058
1073
39
<none>
Block
false
0
false
case Success(_)

51
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1077
1104
39
notifyObservers
Apply
false
0
false
notifyObservers(Event.Redo)

52
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1112
1135
40
<none>
Block
false
0
false
case Failure(exception)

53
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1139
1167
40
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

54
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
993
1001
37
redo
DefDef
false
0
false
def redo

