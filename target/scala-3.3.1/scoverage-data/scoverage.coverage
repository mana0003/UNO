# Coverage data, format version: 3.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
0
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
365
984
13
apply
Apply
false
0
false
Try {\r\n    previousState = Some(controller.field) // Save the current game state\r\n    val newCard = randomCard // Draw a random card\r\n    drawnCard = Some(newCard) // Save the drawn card for redo\r\n\r\n    val currentPlayer = controller.field.players(controller.field.currentPlayer)\r\n    val updatedPlayer = currentPlayer.copy(hand = currentPlayer.hand.addCard(newCard))\r\n\r\n    val updatedPlayers = controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )\r\n\r\n    controller.field = controller.field.copy(players = updatedPlayers)\r\n    controller.notifyObservers(Event.Draw)\r\n  }

1
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
465
475
15
randomCard
Ident
false
0
false
randomCard

2
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
588
644
18
apply
Apply
false
0
false
controller.field.players(controller.field.currentPlayer)

3
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
696
731
19
addCard
Apply
false
0
false
currentPlayer.hand.addCard(newCard)

4
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
761
861
21
updated
Apply
false
0
false
controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )

5
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
941
979
27
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Draw)

6
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
doStep
314
333
13
doStep
DefDef
false
0
false
override def doStep

7
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undoStep
1054
1070
31
<none>
Block
false
0
false
case Some(state)

8
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undoStep
1081
1209
32
apply
Apply
false
0
false
Try {\r\n        controller.field = state // Revert to the previous state\r\n        controller.notifyObservers(Event.Undo)\r\n      }

9
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undoStep
1162
1200
34
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Undo)

10
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undoStep
1215
1224
36
<none>
Block
false
0
false
case None

11
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undoStep
1236
1284
36
<init>
Apply
false
0
false
new IllegalStateException("No state to undo to")

12
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
undoStep
990
1011
30
undoStep
DefDef
false
0
false
override def undoStep

13
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1333
1882
39
apply
Apply
false
0
false
Try {\r\n    if (drawnCard.isEmpty) throw new IllegalStateException("No card to redo drawing")\r\n    val newCard = drawnCard.get\r\n\r\n    val currentPlayer = controller.field.players(controller.field.currentPlayer)\r\n    val updatedPlayer = currentPlayer.copy(hand = currentPlayer.hand.addCard(newCard))\r\n\r\n    val updatedPlayers = controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )\r\n\r\n    controller.field = controller.field.copy(players = updatedPlayers)\r\n    controller.notifyObservers(Event.Redo)\r\n  }

14
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1348
1365
40
isEmpty
Select
false
0
false
drawnCard.isEmpty

15
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1367
1425
40
throw
Apply
false
0
false
throw new IllegalStateException("No card to redo drawing")

16
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1373
1425
40
<init>
Apply
false
0
false
new IllegalStateException("No card to redo drawing")

17
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1367
1425
40
throw
Apply
true
0
false
throw new IllegalStateException("No card to redo drawing")

18
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1445
1458
41
get
Select
false
0
false
drawnCard.get

19
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1486
1542
43
apply
Apply
false
0
false
controller.field.players(controller.field.currentPlayer)

20
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1594
1629
44
addCard
Apply
false
0
false
currentPlayer.hand.addCard(newCard)

21
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1659
1759
46
updated
Apply
false
0
false
controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )

22
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1839
1877
52
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Redo)

23
src\\main\\scala\\controller\\DrawCommand.scala
controller
DrawCommand
Class
controller.DrawCommand
redoStep
1296
1317
39
redoStep
DefDef
false
0
false
override def redoStep

24
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
331
1158
12
apply
Apply
false
0
false
Try {\r\n    previousState = Some(controller.field) // Save the current game state\r\n\r\n    val currentPlayer = controller.field.players(controller.field.currentPlayer)\r\n\r\n    if (!card.canBePlayedOn(controller.field.topCard)) {\r\n      throw new IllegalArgumentException("Card cannot be played on the current top card")\r\n    }\r\n\r\n    val updatedPlayer = currentPlayer.copy(hand = currentPlayer.hand.removeCard(card))\r\n    val updatedPlayers = controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )\r\n\r\n    val nextPlayer = (controller.field.currentPlayer + 1) % controller.field.players.length\r\n    controller.field = controller.field.copy(\r\n      players = updatedPlayers,\r\n      topCard = card,\r\n      currentPlayer = nextPlayer\r\n    )\r\n    controller.notifyObservers(Event.Play)\r\n  }

25
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
439
495
15
apply
Apply
false
0
false
controller.field.players(controller.field.currentPlayer)

26
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
508
552
17
canBePlayedOn
Apply
false
0
false
card.canBePlayedOn(controller.field.topCard)

27
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
563
646
18
throw
Apply
false
0
false
throw new IllegalArgumentException("Card cannot be played on the current top card")

28
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
569
646
18
<init>
Apply
false
0
false
new IllegalArgumentException("Card cannot be played on the current top card")

29
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
554
653
17
<none>
Block
true
0
false
{\r\n      throw new IllegalArgumentException("Card cannot be played on the current top card")\r\n    }

30
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
707
742
21
removeCard
Apply
false
0
false
currentPlayer.hand.removeCard(card)

31
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
770
870
22
updated
Apply
false
0
false
controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )

32
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
934
965
27
length
Select
false
0
false
controller.field.players.length

33
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
1115
1153
33
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Play)

34
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
doStep
280
299
12
doStep
DefDef
false
0
false
override def doStep

35
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undoStep
1228
1244
37
<none>
Block
false
0
false
case Some(state)

36
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undoStep
1255
1383
38
apply
Apply
false
0
false
Try {\r\n        controller.field = state // Revert to the previous state\r\n        controller.notifyObservers(Event.Undo)\r\n      }

37
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undoStep
1336
1374
40
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Undo)

38
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undoStep
1389
1398
42
<none>
Block
false
0
false
case None

39
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undoStep
1410
1458
42
<init>
Apply
false
0
false
new IllegalStateException("No state to undo to")

40
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
undoStep
1164
1185
36
undoStep
DefDef
false
0
false
override def undoStep

41
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1507
2254
45
apply
Apply
false
0
false
Try {\r\n    val currentPlayer = controller.field.players(controller.field.currentPlayer)\r\n\r\n    if (!card.canBePlayedOn(controller.field.topCard)) {\r\n      throw new IllegalStateException("Card cannot be redone on the current top card")\r\n    }\r\n\r\n    val updatedPlayer = currentPlayer.copy(hand = currentPlayer.hand.removeCard(card))\r\n    val updatedPlayers = controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )\r\n\r\n    val nextPlayer = (controller.field.currentPlayer + 1) % controller.field.players.length\r\n    controller.field = controller.field.copy(\r\n      players = updatedPlayers,\r\n      topCard = card,\r\n      currentPlayer = nextPlayer\r\n    )\r\n    controller.notifyObservers(Event.Redo)\r\n  }

42
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1538
1594
46
apply
Apply
false
0
false
controller.field.players(controller.field.currentPlayer)

43
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1607
1651
48
canBePlayedOn
Apply
false
0
false
card.canBePlayedOn(controller.field.topCard)

44
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1662
1742
49
throw
Apply
false
0
false
throw new IllegalStateException("Card cannot be redone on the current top card")

45
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1668
1742
49
<init>
Apply
false
0
false
new IllegalStateException("Card cannot be redone on the current top card")

46
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1653
1749
48
<none>
Block
true
0
false
{\r\n      throw new IllegalStateException("Card cannot be redone on the current top card")\r\n    }

47
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1803
1838
52
removeCard
Apply
false
0
false
currentPlayer.hand.removeCard(card)

48
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1866
1966
53
updated
Apply
false
0
false
controller.field.players.updated(\r\n      controller.field.currentPlayer,\r\n      updatedPlayer\r\n    )

49
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
2030
2061
58
length
Select
false
0
false
controller.field.players.length

50
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
2211
2249
64
notifyObservers
Apply
false
0
false
controller.notifyObservers(Event.Redo)

51
src\\main\\scala\\controller\\PlayCommand.scala
controller
PlayCommand
Class
controller.PlayCommand
redoStep
1470
1491
45
redoStep
DefDef
false
0
false
override def redoStep

52
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
<init>
252
272
9
<init>
Apply
false
0
false
new CommandManager()

53
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
setGuiActive
323
339
12
setGuiActive
DefDef
false
0
false
def setGuiActive

54
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
isGuiMode
404
417
16
isGuiMode
DefDef
false
0
false
def isGuiMode

55
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
497
524
19
<init>
Apply
false
0
false
new PlayCommand(this, card)

56
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
530
560
20
doStep
Apply
false
0
false
commandManager.doStep(command)

57
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
576
591
21
<none>
Block
false
0
false
case Success(_)

58
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
604
697
22
println
Apply
false
0
false
println(s"Player ${field.currentPlayer + 1} played: ${card.getColorCode}${card.value}$RESET")

59
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
612
696
22
s
Apply
false
0
false
s"Player ${field.currentPlayer + 1} played: ${card.getColorCode}${card.value}$RESET"

60
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
658
675
22
getColorCode
Select
false
0
false
card.getColorCode

61
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
690
695
22
RESET
Ident
false
0
false
RESET

62
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
707
869
23
println
Apply
false
0
false
println(s"Player ${field.currentPlayer + 1} hand: ${field.players(field.currentPlayer).hand.cards.map(c => s"${c.getColorCode}${c.value}$RESET").mkString(", ")}")

63
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
715
868
23
s
Apply
false
0
false
s"Player ${field.currentPlayer + 1} hand: ${field.players(field.currentPlayer).hand.cards.map(c => s"${c.getColorCode}${c.value}$RESET").mkString(", ")}"

64
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
759
866
23
mkString
Apply
false
0
false
field.players(field.currentPlayer).hand.cards.map(c => s"${c.getColorCode}${c.value}$RESET").mkString(", ")

65
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
759
851
23
map
Apply
false
0
false
field.players(field.currentPlayer).hand.cards.map(c => s"${c.getColorCode}${c.value}$RESET")

66
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
759
793
23
apply
Apply
false
0
false
field.players(field.currentPlayer)

67
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
$anonfun
814
850
23
s
Apply
false
0
false
s"${c.getColorCode}${c.value}$RESET"

68
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
$anonfun
818
832
23
getColorCode
Select
false
0
false
c.getColorCode

69
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
$anonfun
844
849
23
RESET
Ident
false
0
false
RESET

70
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
879
906
24
notifyObservers
Apply
false
0
false
notifyObservers(Event.Play)

71
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
914
937
25
<none>
Block
false
0
false
case Failure(exception)

72
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
950
978
26
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

73
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
play
447
455
18
play
DefDef
false
0
false
def play

74
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
1036
1057
31
<init>
Apply
false
0
false
new DrawCommand(this)

75
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
1063
1093
32
doStep
Apply
false
0
false
commandManager.doStep(command)

76
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
1109
1124
33
<none>
Block
false
0
false
case Success(_)

77
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
1137
1164
34
notifyObservers
Apply
false
0
false
notifyObservers(Event.Draw)

78
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
1172
1195
35
<none>
Block
false
0
false
case Failure(exception)

79
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
1208
1236
36
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

80
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
draw
996
1004
30
draw
DefDef
false
0
false
def draw

81
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
1281
1306
41
undoStep
Apply
false
0
false
commandManager.undoStep()

82
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
1322
1337
42
<none>
Block
false
0
false
case Success(_)

83
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
1350
1377
43
notifyObservers
Apply
false
0
false
notifyObservers(Event.Undo)

84
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
1385
1400
44
<none>
Block
false
0
false
case Failure(_)

85
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
1413
1441
45
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

86
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
undo
1255
1263
40
undo
DefDef
false
0
false
def undo

87
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1486
1511
50
redoStep
Apply
false
0
false
commandManager.redoStep()

88
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1527
1542
51
<none>
Block
false
0
false
case Success(_)

89
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1555
1582
52
notifyObservers
Apply
false
0
false
notifyObservers(Event.Redo)

90
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1590
1605
53
<none>
Block
false
0
false
case Failure(_)

91
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1618
1646
54
notifyObservers
Apply
false
0
false
notifyObservers(Event.Error)

92
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
redo
1460
1468
49
redo
DefDef
false
0
false
def redo

93
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
startGame
1696
1724
59
notifyObservers
Apply
false
0
false
notifyObservers(Event.Start)

94
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
startGame
1665
1678
58
startGame
DefDef
false
0
false
def startGame

95
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
getField
1736
1748
62
getField
DefDef
false
0
false
def getField

96
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
getCurrentPlayer
1773
1793
64
getCurrentPlayer
DefDef
false
0
false
def getCurrentPlayer

97
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
addObserver
1886
1913
67
addObserver
Apply
false
0
false
super.addObserver(observer)

98
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
addObserver
1826
1850
66
addObserver
DefDef
false
0
false
override def addObserver

99
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
notifyObservers
1982
2010
71
notifyObservers
Apply
false
0
false
super.notifyObservers(event)

100
src\\main\\scala\\controller\\UnoController.scala
controller
UnoController
Class
controller.UnoController
notifyObservers
1924
1952
70
notifyObservers
DefDef
false
0
false
override def notifyObservers

101
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
<init>
142
145
5
Nil
Ident
false
0
false
Nil

102
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
<init>
188
191
6
Nil
Ident
false
0
false
Nil

103
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
doStep
296
319
10
doStep
Apply
false
0
false
command.doStep(command)

104
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
doStep
347
362
12
<none>
Block
false
0
false
case Success(_)

105
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
doStep
387
407
13
::
Apply
false
0
false
command :: undoStack

106
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
doStep
429
432
14
Nil
Ident
false
0
false
Nil

107
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
doStep
484
499
15
<none>
Block
false
0
false
case Failure(_)

108
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
doStep
225
244
9
doStep
DefDef
false
0
false
override def doStep

109
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
608
616
23
<none>
Block
false
0
false
case Nil

110
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
628
677
23
<init>
Apply
false
0
false
new NoSuchElementException("No commands to undo")

111
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
686
703
24
<none>
Block
false
0
false
case head :: tail

112
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
729
744
25
undoStep
Apply
false
0
false
head.undoStep()

113
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
780
795
27
<none>
Block
false
0
false
case Success(_)

114
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
854
871
29
::
Apply
false
0
false
head :: redoStack

115
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
883
898
30
<none>
Block
false
0
false
case Failure(_)

116
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
undoStep
548
560
21
undoStep
DefDef
false
0
false
def undoStep

117
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1020
1028
38
<none>
Block
false
0
false
case Nil

118
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1040
1089
38
<init>
Apply
false
0
false
new NoSuchElementException("No commands to redo")

119
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1098
1115
39
<none>
Block
false
0
false
case head :: tail

120
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1141
1156
40
redoStep
Apply
false
0
false
head.redoStep()

121
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1192
1207
42
<none>
Block
false
0
false
case Success(_)

122
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1266
1283
44
::
Apply
false
0
false
head :: undoStack

123
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
1295
1310
45
<none>
Block
false
0
false
case Failure(_)

124
src\\main\\scala\\util\\CommandManager.scala
util
CommandManager
Class
util.CommandManager
redoStep
960
972
36
redoStep
DefDef
false
0
false
def redoStep

